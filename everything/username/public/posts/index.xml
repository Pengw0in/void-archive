<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lohithsrikar</title>
    <link>http://localhost:1313/lohithsrikar/posts/</link>
    <description>Recent content in Posts on lohithsrikar</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jun 2025 20:23:58 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/lohithsrikar/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Docs] Kowalski - Discord bot</title>
      <link>http://localhost:1313/lohithsrikar/posts/docs/kowalski/</link>
      <pubDate>Sun, 01 Jun 2025 20:23:58 +0530</pubDate>
      <guid>http://localhost:1313/lohithsrikar/posts/docs/kowalski/</guid>
      <description>&lt;h1 id=&#34;kowalski-documentation&#34;&gt;Kowalski Documentation&lt;/h1&gt;&#xA;&lt;p&gt;Kowalski is a simple bot written in python. This bot allows users to apply various encryptions , hashing methods and perform simple text analysis. This includes Caesar Cipher, Base64 encoding, Morse code, and more.&lt;/p&gt;&#xA;&lt;p&gt;Below is the simple documetation on how to use this bot along with examples&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-general-info&#34;&gt;1. General Info&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prefix: &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Language: Python&lt;/li&gt;&#xA;&lt;li&gt;Name inspiration: &lt;a href=&#34;https://static.wikia.nocookie.net/heroes-and-villain/images/8/8f/Profile_-_Kowalski.jpg/revision/latest?cb=20200125033446&#34;&gt;Kowalski&lt;/a&gt; from &lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;opi=89978449&amp;amp;url=https://madagascar.fandom.com/wiki/The_Penguins_of_Madagascar&amp;amp;ved=2ahUKEwi1_uDg3tCNAxXfdPUHHXeCEScQFnoECBkQAQ&amp;amp;usg=AOvVaw3cb0w5sTiYjx98uua_wwsv&#34;&gt;Penguins of Madagascar&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Hotel: Trivago&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-command-overview&#34;&gt;2. Command Overview&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Morse Code Encryption: &lt;code&gt;/me &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Morse Code Decryption: &lt;code&gt;/md &amp;lt;morse_code&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Caesar Cipher Encryption: &lt;code&gt;/ce &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Caesar Cipher Decryption: &lt;code&gt;/cd &amp;lt;encrypted_message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Binary Encryption: &lt;code&gt;/be &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Binary Decryption: &lt;code&gt;/bd &amp;lt;binary_code&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Base64 Encryption: &lt;code&gt;/he &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Base64 Decryption: &lt;code&gt;/hd &amp;lt;encoded_message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Vigenère Cipher Encryption: &lt;code&gt;/ve &amp;lt;key&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Vigenère Cipher Decryption: &lt;code&gt;/vd &amp;lt;key&amp;gt; &amp;lt;encrypted_message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;ROT13 Cipher: &lt;code&gt;/rot13 &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Reverse Text: &lt;code&gt;/reverse &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Hashing (MD5): &lt;code&gt;/hashmd5 &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Hashing (SHA-256): &lt;code&gt;/hashsha256 &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Random Substitution Cipher: &lt;code&gt;/rs &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Salted Hashing: &lt;code&gt;/sh &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;AES Encryption : &lt;code&gt;/aese &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;AES Decryption: &lt;code&gt;/aesd &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Text Analysis: &lt;code&gt;/analysis &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-command-examples&#34;&gt;3. Command Examples&lt;/h2&gt;&#xA;&lt;h3 id=&#34;3-1-morse-code&#34;&gt;3-1. Morse Code&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Encrypt: &lt;code&gt;/me Hello&lt;/code&gt; → &lt;code&gt;.... . .-.. .-.. ---&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Decrypt: &lt;code&gt;/md .... . .-.. .-.. ---&lt;/code&gt; → &lt;code&gt;Hello&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-2-caesar-cipher&#34;&gt;3-2. Caesar Cipher&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Encrypt: &lt;code&gt;/ce Hello&lt;/code&gt; → &lt;code&gt;Khoor&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Decrypt: &lt;code&gt;/cd Khoor&lt;/code&gt; → &lt;code&gt;Hello&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-3-base64&#34;&gt;3-3. Base64&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Encode: &lt;code&gt;/he Hello&lt;/code&gt; → &lt;code&gt;SGVsbG8=&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Decode: &lt;code&gt;/hd SGVsbG8=&lt;/code&gt; → &lt;code&gt;Hello&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-4-hashing&#34;&gt;3-4. Hashing&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MD5: &lt;code&gt;/hashmd5 Hello&lt;/code&gt; → &lt;code&gt;8b1a9953c4611296a827abf8c47804d7&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;SHA-256: &lt;code&gt;/hashsha256 Hello&lt;/code&gt; → &lt;code&gt;185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-5-other&#34;&gt;3-5. Other&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reverse: &lt;code&gt;/reverse Hello&lt;/code&gt; → &lt;code&gt;olleH&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;ROT13: &lt;code&gt;/rot13 Hello&lt;/code&gt; → &lt;code&gt;Uryyb&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Binary: &lt;code&gt;/be Hello&lt;/code&gt; → &lt;code&gt;01001000 01100101 ...&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Analyze: &lt;code&gt;/analyze Hello Hello&lt;/code&gt; → &lt;code&gt;Most frequent word: Hello (2)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;For more details, use your brain&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[OWASP] Broken Object Level Authorization</title>
      <link>http://localhost:1313/lohithsrikar/posts/owasp-api/bola/</link>
      <pubDate>Thu, 29 May 2025 20:23:58 +0530</pubDate>
      <guid>http://localhost:1313/lohithsrikar/posts/owasp-api/bola/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;OWASP API Security Top 10&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;http://localhost:1313/lohithsrikar/posts/bolg/&#34;&gt;1. Broken Object Level Authorization&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the present world, Application Programming Interface (API) stands out to be one of the most critical aspects. APIs are responsible for our daily activities like checking weather on our smart phone, buying a product from an E-commerce store or accessing our data on cloud storage and many more. However such technology also comes with its own risks. One of which is Broken object level authorization(BOLA).&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Nahamcon25] Free Flags!</title>
      <link>http://localhost:1313/lohithsrikar/posts/nahamcon25/freeflags/</link>
      <pubDate>Fri, 23 May 2025 20:23:58 +0530</pubDate>
      <guid>http://localhost:1313/lohithsrikar/posts/nahamcon25/freeflags/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;NahamCon 2025 CTF Series&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;http://localhost:1313/lohithsrikar/posts/freeflags/&#34;&gt;1. Free Flags!&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;http://localhost:1313/lohithsrikar/posts/quartet/&#34;&gt;2. Quartet&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;      &lt;li&gt;-&lt;a href=&#34;http://localhost:1313/lohithsrikar/posts/screenshot/&#34;&gt;3. ScreenShot!&lt;/a&gt;&lt;/li&gt;&#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;free-flags&#34;&gt;Free Flags!&lt;/h1&gt;&#xA;&lt;p&gt;Hello everyone!&lt;/p&gt;&#xA;&lt;img src=&#34;http://localhost:1313/lohithsrikar/images/nahamcon/freeflags/1.png&#34; alt=&#34;Challenge Screenshot&#34; width=&#34;600&#34;&gt;&#xA;&lt;p&gt;This is our first challenge in NahamCon 2025 CTF. In this challenge, we are given a &lt;em&gt;free_flags.txt&lt;/em&gt; file, which apparently contains a lot of flags! So how do we find the correct flag among them?&lt;/p&gt;&#xA;&lt;p&gt;Brute force maybe? Perhaps?&lt;/p&gt;&#xA;&lt;p&gt;Well, it&amp;rsquo;s possible, but not feasible!&lt;/p&gt;&#xA;&lt;img src=&#34;http://localhost:1313/lohithsrikar/images/nahamcon/freeflags/2.png&#34; alt=&#34;File Contents&#34; width=&#34;600&#34;&gt;&#xA;&lt;p&gt;So how do we solve this? If only we had criteria to filter out the correct flag&amp;hellip; if only we had&amp;hellip; wait! If you have read the rules properly, you&amp;rsquo;ll find something like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Nahamcon25] Quartet</title>
      <link>http://localhost:1313/lohithsrikar/posts/nahamcon25/quartet/</link>
      <pubDate>Fri, 23 May 2025 20:23:58 +0530</pubDate>
      <guid>http://localhost:1313/lohithsrikar/posts/nahamcon25/quartet/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;NahamCon 2025 CTF Series&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;quartet&#34;&gt;Quartet&lt;/h1&gt;&#xA;&lt;p&gt;Hello everyone!&lt;/p&gt;&#xA;&lt;p&gt;In this writeup, let&amp;rsquo;s see how we can solve the Quartet CTF challenge from NahamCon 2025.&lt;/p&gt;&#xA;&lt;img src=&#34;http://localhost:1313/lohithsrikar/images/nahamcon/quartet/1.png&#34; alt=&#34;Challenge Screenshot&#34; width=&#34;600&#34;&gt;&#xA;&lt;p&gt;We are given four files with strange extensions. Well, they may seem strange for someone who&amp;rsquo;s seeing them for the first time, but they&amp;rsquo;re not!&lt;/p&gt;&#xA;&lt;p&gt;These files with &amp;ldquo;zX&amp;rdquo; (where X is a number) extensions are parts of a single zip file (.zip). Basically, combining these zip files will give us one single complete zip file in theory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Nahamcon25] ScreenShot!</title>
      <link>http://localhost:1313/lohithsrikar/posts/nahamcon25/screenshot/</link>
      <pubDate>Fri, 23 May 2025 20:23:58 +0530</pubDate>
      <guid>http://localhost:1313/lohithsrikar/posts/nahamcon25/screenshot/</guid>
      <description>&lt;div class=&#34;series&#34;&gt;&#xA;  &lt;details&gt;&#xA;    &lt;summary&gt;NahamCon 2025 CTF Series&lt;/summary&gt;&#xA;    &lt;ul&gt;&#xA;      &#xA;      &#xA;      &#xA;    &lt;/ul&gt;&#xA;  &lt;/details&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;screenshot&#34;&gt;ScreenShot!&lt;/h1&gt;&#xA;&lt;p&gt;Hello everyone!&#xA;Let&amp;rsquo;s wrap this up quickly!&lt;/p&gt;&#xA;&lt;p&gt;This is a CTF challenge from NahamCon 2025 where we are given an image.&lt;/p&gt;&#xA;&lt;img src=&#34;http://localhost:1313/lohithsrikar/images/nahamcon/screenshot/1.png&#34; alt=&#34;Challenge Screenshot&#34; width=&#34;600&#34;&gt;&#xA;&lt;p&gt;Well, the image contains a hex dump of some zip file.&lt;/p&gt;&#xA;&lt;img src=&#34;http://localhost:1313/lohithsrikar/images/nahamcon/screenshot/2.png&#34; alt=&#34;Hex Dump Screenshot&#34; width=&#34;600&#34;&gt;&#xA;&lt;p&gt;Well, how did I know it&amp;rsquo;s a zip file? Well, obviously it&amp;rsquo;s mentioned in the CTF description, right?&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s true, but another way is to match the file signature. Each file extension has its own file signature at the beginning of the file. For example, in this case we have &lt;code&gt;504b&lt;/code&gt;, which is the file signature for zip files! More info about them here: &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_file_signatures&#34;&gt;https://en.wikipedia.org/wiki/List_of_file_signatures&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
